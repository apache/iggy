name: ci-test-rust
on:
  workflow_dispatch:
  workflow_call:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  IGGY_CI_BUILD: true

jobs:
  x86_64-unknown-linux-musl:
    name: x86_64-unknown-linux-musl
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      TARGET: x86_64-unknown-linux-musl
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ env.TARGET }}"
      - name: Install musl-tools, gnome-keyring and keyutils
        run: |
          sudo apt-get update --yes && sudo apt-get install --yes musl-tools gnome-keyring keyutils
          rm -f $HOME/.local/share/keyrings/*
          echo -n "test" | gnome-keyring-daemon --unlock
      - name: Prepare ${{ env.TARGET }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ env.TARGET }}
      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Set verbose flag
        shell: bash
        run: echo "VERBOSE_FLAG=$([[ "${RUNNER_DEBUG}" = "1" ]] && echo "--verbose" || echo "")" >> $GITHUB_ENV
      - name: Build binary ${{ env.TARGET }}
        run: cross +stable build ${{ env.VERBOSE_FLAG }} --target ${{ env.TARGET }}
      - name: Run tests ${{ env.TARGET }}
        run: cross +stable test ${{ env.VERBOSE_FLAG }} --target ${{ env.TARGET }}
      - name: Check CLI examples from README
        run: ./scripts/run-examples-from-readme.sh
      - name: Check if workspace is clean
        run: git status | grep "working tree clean" || { git status ; exit 1; }

  x86_64-unknown-linux-gnu:
    name: x86_64-unknown-linux-gnu
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      TARGET: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ env.TARGET }}"
      - name: Install musl-tools, gnome-keyring and keyutils
        run: |
          sudo apt-get update --yes && sudo apt-get install --yes musl-tools gnome-keyring keyutils
          rm -f $HOME/.local/share/keyrings/*
          echo -n "test" | gnome-keyring-daemon --unlock
      - name: Prepare ${{ env.TARGET }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ env.TARGET }}
      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Set verbose flag
        shell: bash
        run: echo "VERBOSE_FLAG=$([[ "${RUNNER_DEBUG}" = "1" ]] && echo "--verbose" || echo "")" >> $GITHUB_ENV
      - name: Build binary ${{ env.TARGET }}
        run: cross +stable build ${{ env.VERBOSE_FLAG }} --target ${{ env.TARGET }}
      - name: Run tests ${{ env.TARGET }}
        run: cross +stable test ${{ env.VERBOSE_FLAG }} --target ${{ env.TARGET }}
      - name: Check CLI examples from README
        run: ./scripts/run-examples-from-readme.sh
      - name: Check if workspace is clean
        run: git status | grep "working tree clean" || { git status ; exit 1; }

  x86_64-pc-windows-msvc:
    name: x86_64-pc-windows-msvc
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
        with:
          key: "x86_64-pc-windows-msvc"
      - name: Prepare x86_64-pc-windows-msvc toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-pc-windows-msvc
      - name: Set verbose flag
        shell: pwsh
        run: |
          if ($env:RUNNER_DEBUG -eq "1") {
            echo "VERBOSE_FLAG=--verbose" >> $env:GITHUB_ENV
          } else {
            echo "VERBOSE_FLAG=" >> $env:GITHUB_ENV
          }
      - name: Build iggy package
        run: cargo build ${{ env.VERBOSE_FLAG }} --target x86_64-pc-windows-msvc -p iggy
      - name: Build iggy-cli binary
        run: cargo build ${{ env.VERBOSE_FLAG }} --target x86_64-pc-windows-msvc --bin iggy
      - name: Check if workspace is clean
        run: git status | grep "working tree clean" || { git status ; exit 1; }

  backwards_compatibility:
    if: github.event_name == 'pull_request'
    name: backwards_compatibility
    uses: ./.github/workflows/backwards_compatibility.yml
    with:
      pr_body: ${{ github.event.pull_request.body }}
