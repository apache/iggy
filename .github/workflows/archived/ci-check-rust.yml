# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# -------------------------------------------------------------
#
# CI Check Rust Workflow
#
# This workflow runs checks for Rust code using cargo commands.
# Checks include:
# - static analysis using `cargo check`
# - code formatting using `cargo fmt`
# - linting using `cargo clippy`
# - sorted dependencies check using `cargo sort`
# - documentation tests using `cargo test --doc`
# - documentation generation using `cargo doc`
# - unused dependencies check using `cargo machete`
#
# This workflow can be triggered manually or by other workflows.
#
name: ci-check-rust

on:
  workflow_dispatch:
  workflow_call:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  check-rust-version-sync:
    name: check Rust version sync
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check Rust versions are synchronized
        run: |
          # Extract version from rust-toolchain.toml
          TOOLCHAIN_VERSION=$(grep 'channel' rust-toolchain.toml | sed 's/.*"\(.*\)".*/\1/')
          echo "rust-toolchain.toml version: $TOOLCHAIN_VERSION"
          
          # Check bdd/rust/Dockerfile
          BDD_VERSION=$(grep '^FROM rust:' bdd/rust/Dockerfile | sed 's/FROM rust:\([0-9.]\+\).*/\1/')
          echo "bdd/rust/Dockerfile version: $BDD_VERSION"
          
          # Check core/bench/dashboard/server/Dockerfile
          BENCH_VERSION=$(grep '^FROM rust:' core/bench/dashboard/server/Dockerfile | sed 's/FROM rust:\([0-9.]\+\).*/\1/')
          echo "core/bench/dashboard/server/Dockerfile version: $BENCH_VERSION"
          
          # Verify all versions match
          if [ "$TOOLCHAIN_VERSION" != "$BDD_VERSION" ]; then
            echo "ERROR: bdd/rust/Dockerfile uses Rust $BDD_VERSION but rust-toolchain.toml specifies $TOOLCHAIN_VERSION"
            echo "Run ./scripts/sync-rust-version.sh to fix this"
            exit 1
          fi
          
          if [ "$TOOLCHAIN_VERSION" != "$BENCH_VERSION" ]; then
            echo "ERROR: core/bench/dashboard/server/Dockerfile uses Rust $BENCH_VERSION but rust-toolchain.toml specifies $TOOLCHAIN_VERSION"
            echo "Run ./scripts/sync-rust-version.sh to fix this"
            exit 1
          fi
          
          echo "âœ“ All Rust versions are synchronized at $TOOLCHAIN_VERSION"

  check:
    name: cargo check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        run: |
           echo "Using Rust toolchain from rust-toolchain.toml: $(rustup show)"
      - name: Run cargo check
        run: |
          cargo check

  fmt:
    name: cargo fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        run: |
           echo "Using Rust toolchain from rust-toolchain.toml: $(rustup show)"
      - name: Run cargo fmt
        run: |
          cargo fmt --all -- --check

  clippy:
    name: cargo clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        run: |
           echo "Using Rust toolchain from rust-toolchain.toml: $(rustup show)"
      - name: Run cargo clippy
        run: |
          cargo clippy --all-targets --all-features -- -D warnings

  sort:
    name: cargo sort
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        run: |
           echo "Using Rust toolchain from rust-toolchain.toml: $(rustup show)"
      - name: Install cargo-sort
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-sort
      - name: Run cargo sort
        run: |
          cargo sort --check --workspace

  doctest:
    name: cargo test docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        run: |
           echo "Using Rust toolchain from rust-toolchain.toml: $(rustup show)"
      - name: Run cargo test (doc)
        run: |
          cargo test --doc
      - name: Run cargo doc
        run: |
          cargo doc --no-deps --all-features --quiet

  unused_dependencies:
    name: cargo machete
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        run: |
           echo "Using Rust toolchain from rust-toolchain.toml: $(rustup show)"
      - name: Install cargo-machete
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-machete
      - name: Run cargo machete
        run: |
          cargo machete --with-metadata
